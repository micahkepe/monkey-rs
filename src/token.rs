//! # Token
//!
//! `token` defines the tokens accepted from a Monkey source file.
use std::fmt;

/// Defines the tokens in the token stream generated by the lexer.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Token {
    // Reserved
    Illegal,
    Eof,

    // Identifiers and literals
    Ident(String), // add, foobar, x, y, ...
    Int(i32),      // [0-9]

    // Operators
    Assign,   // =
    Plus,     // +
    Minus,    // -
    Bang,     // !
    Asterisk, // *
    Slash,    // /
    Lt,       // <
    Gt,       // >
    Eq,       // ==
    NotEq,    // !=

    // Delimiters
    Comma,     // ,
    Semicolon, // ;
    LParen,    // (
    RParen,    // )
    LBrace,    // {
    RBrace,    // }

    // Keywords
    Function, // fn
    Let,      // let
    True,     // true
    False,    //  false
    If,       // if
    Else,     // else
    Return,   // return
}

impl fmt::Display for Token {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Token::Illegal => write!(f, "ILLEGAL"),
            Token::Eof => write!(f, "EOF"),
            Token::Ident(id) => write!(f, "{}", id),
            Token::Int(i) => write!(f, "{}", i),
            Token::Assign => write!(f, "="),
            Token::Plus => write!(f, "+"),
            Token::Minus => write!(f, "-"),
            Token::Bang => write!(f, "!"),
            Token::Asterisk => write!(f, "*"),
            Token::Slash => write!(f, "/"),
            Token::Lt => write!(f, "<"),
            Token::Gt => write!(f, ">"),
            Token::Eq => write!(f, "=="),
            Token::NotEq => write!(f, "!="),
            Token::Comma => write!(f, ","),
            Token::Semicolon => write!(f, ";"),
            Token::LParen => write!(f, "("),
            Token::RParen => write!(f, ")"),
            Token::LBrace => write!(f, "{{"), // escape
            Token::RBrace => write!(f, "}}"), // escape
            Token::Function => write!(f, "FUNCTION"),
            Token::Let => write!(f, "LET"),
            Token::True => write!(f, "TRUE"),
            Token::False => write!(f, "FALSE"),
            Token::If => write!(f, "IF"),
            Token::Else => write!(f, "ELSE"),
            Token::Return => write!(f, "RETURN"),
        }
    }
}

/// Map a raw identifier to either a keyword token or an `Ident`
pub fn lookup_ident(ident: &str) -> Token {
    match ident {
        // keywords
        "fn" => Token::Function,
        "let" => Token::Let,
        "true" => Token::True,
        "false" => Token::False,
        "if" => Token::If,
        "else" => Token::Else,
        "return" => Token::Return,

        // user-defined identifier
        _ => Token::Ident(ident.to_string()),
    }
}
